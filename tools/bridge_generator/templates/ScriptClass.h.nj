#ifndef KRIT_SCRIPT_SCRIPTCLASS
#define KRIT_SCRIPT_SCRIPTCLASS

#include "krit/script/ScriptValue.h"

{% for wrapper in wrappers %}
{% if wrapper.noForwardDeclare %}
{% for import in wrapper.import %}
#include "{{ import }}"
{% endfor %}
{% else %}
namespace {{ wrapper.namespace }} {
    struct {{ wrapper.name }};
}
{% endif %}
{% endfor %}

namespace krit {

struct ScriptEngine;

template <typename I> static std::string n2hexstr(I w, size_t hex_len = sizeof(I)<<1) {
    static const char* digits = "0123456789abcdef";
    std::string rc(hex_len,'0');
    for (size_t i=0, j=(hex_len-1)*4 ; i<hex_len; ++i,j-=4)
        rc[i] = digits[(w>>j) & 0x0f];
    return rc;
}

#define countof(x) (sizeof(x) / sizeof((x)[0]))

enum ScriptClass: int {
    {% for wrapper in wrappers %}
    ScriptClass{{ wrapper.name }},
    ScriptClass{{ wrapper.name }}Finalizer,
    {% endfor %}
    ScriptClassCount,
};

template <int N> void registerScriptClass(ScriptEngine *engine);
template <int C> JSClassDef *scriptClassDef();

{% for wrapper in wrappers %}
template <> JSValue ScriptValue<{{ wrapper.namespace }}::{{ wrapper.name }}>::valueToJs(JSContext *ctx, {{ wrapper.namespace }}::{{ wrapper.name }} const &val);
{% if not wrapper.pointerOnly %}
template <> {{ wrapper.namespace }}::{{ wrapper.name }} ScriptValue<{{ wrapper.namespace }}::{{ wrapper.name }}>::jsToValue(JSContext *ctx, JSValue val);
{% endif %}
template <> JSValue ScriptValue<{{ wrapper.namespace }}::{{ wrapper.name }}*>::valueToJs(JSContext *ctx, {{ wrapper.namespace }}::{{ wrapper.name }} * const &val);
template <> {{ wrapper.namespace }}::{{ wrapper.name }}* ScriptValue<{{ wrapper.namespace }}::{{ wrapper.name }}*>::jsToValue(JSContext *ctx, JSValue val);
template <> void registerScriptClass<ScriptClass{{ wrapper.name }}>(ScriptEngine *engine);
template <> void registerScriptClass<ScriptClass{{ wrapper.name }}Finalizer>(ScriptEngine *engine);
{% endfor %}

template <> void registerScriptClass<ScriptClassCount>(ScriptEngine *engine);

}

#endif
