#ifndef KRIT_SCRIPT_SCRIPTCLASS
#define KRIT_SCRIPT_SCRIPTCLASS

#include "krit/script/ScriptValue.h"

{% for wrapper in wrappers %}
namespace {{ wrapper.namespace }} {
    struct {{ wrapper.name }};
}
{% endfor %}

namespace krit {

#define countof(x) (sizeof(x) / sizeof((x)[0]))

enum ScriptClass {
    {% for wrapper in wrappers %}
    ScriptClass{{ wrapper.name }},
    ScriptClass{{ wrapper.name }}Finalizer,
    {% endfor %}
    ScriptClassCount,
};

{% for wrapper in wrappers %}
template <> JSValue ScriptValue<{{ wrapper.namespace }}::{{ wrapper.name }}>::valueToJs(JSContext *ctx, {{ wrapper.namespace }}::{{ wrapper.name }} const &val);
{% if not wrapper.pointerOnly %}
template <> {{ wrapper.namespace }}::{{ wrapper.name }} ScriptValue<{{ wrapper.namespace }}::{{ wrapper.name }}>::jsToValue(JSContext *ctx, JSValue val);
{% endif %}
template <> JSValue ScriptValue<{{ wrapper.namespace }}::{{ wrapper.name }}*>::valueToJs(JSContext *ctx, {{ wrapper.namespace }}::{{ wrapper.name }} * const &val);
template <> {{ wrapper.namespace }}::{{ wrapper.name }}* ScriptValue<{{ wrapper.namespace }}::{{ wrapper.name }}*>::jsToValue(JSContext *ctx, JSValue val);
{% endfor %}

}

#endif
