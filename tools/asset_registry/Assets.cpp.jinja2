#include "krit/Assets.h"
#include "krit/asset/AssetInfo.h"
#include "krit/asset/AssetType.h"
#include <unordered_map>
#include <string>


namespace krit {

static bool _rootEnabled[AssetRootCount] = {1, 0};

const AssetInfo Assets::_assets[AssetRootCount * AssetCount] = {
    {% for root in roots: %}
    {% for asset in root.assets: %}
    {% if asset %}
    {
        .id = {{ asset.id }},
        .type = {{ asset.type}}Asset,
        .path = "{{ asset.path }}",
        {% if asset.type == 'Image': %}
        .properties = AssetProperties({{ asset.width }}, {{ asset.height }}, {{ asset.realWidth }}, {{ asset.realHeight }}),
        {% else %}
        .properties = AssetProperties(),
        {% endif %}
    },
    {% else %}
    {
        .id = NoAsset,
    },
    {% endif %}
    {% endfor %}
    {% endfor %}
};

std::unordered_map<std::string, int> Assets::_byPath = {
    {% for root in roots: %}
    {% for asset in root.assets: %}
    {% if asset %}
    { "{{ asset.path }}", {{ loop.index - 1 }} },
    { "{{ asset.lookupPath1 }}", {{ loop.index - 1 }} },
    { "{{ asset.lookupPath2 }}", {{ loop.index - 1 }} },
    {% endif %}
    {% endfor %}
    {% endfor %}
};

void Assets::enableRoot(AssetRoot root) { _rootEnabled[root] = true; }
void Assets::disableRoot(AssetRoot root) { _rootEnabled[root] = false; }

const AssetInfo &Assets::byId(AssetId id) {
    if (id >= AssetCount) {
        return _assets[id];
    }
    for (int i = AssetRootCount - 1; i >= 0; --i) {
        if (_rootEnabled[i]) {
            auto &asset = _assets[i * AssetCount + id];
            if (asset.id != NoAsset) {
                return asset;
            }
        }
    }
    panic("couldn't find asset: %i", id);
}

}
